from django.db import models
from django.contrib.auth.models import User

# Create your models here.
#Модель сообщает Django, как работать с данными, которые будут храниться в приложении. 

class Topic(models.Model):
    #Тема, которую изучает пользователь
    text=models.CharField(max_length=200) #Атрибуты CharField могут использоваться для хранения небольших объемов текста: имен, заголовков, названий городов и т. д. При определении атрибута CharField необходимо сообщить Django, сколько места нужно зарезер- вировать для него в базе данных. В данном случае задается максимальная длина max_length, равная 200 символам;
    date_added=models.DateTimeField(auto_now_add=True)#Атрибут date_added содержит данные DateTimeField — блок данных для хранения даты и времени. Аргумент auto_add_now=True приказывает Django автоматически присвоить этому атрибуту текущую дату и время каждый раз, когда пользователь создает новую тему.
    owner=models.ForeignKey(User,on_delete=models.CASCADE) # добавляется поле owner, используемое в отношении внешнего ключа к модели User. Если пользователь удаляется, все темы, связанные с этим пользователем, также будут удалены.
    
    def __str__(self):
        #Возвращает строковое представление модели.
        return self.text

class Entry(models.Model):
    topic=models.ForeignKey(Topic,on_delete=models.CASCADE)#topic, является экземпляром ForeignKey. Термин внешний ключ (foreign key) происходит из теории баз данных; внешний ключ содержит ссылку на другую запись в базе данных. Аргумент on_delete=models.CASCADE сообщает Django, что при удалении темы все записи, связанные с этой темой, также должны быть удалены
    text=models.TextField()
    date_added=models.DateTimeField(auto_now_add=True)
    
    class Meta: #класс Meta вкладывается в класс Entry. Класс Meta хранит дополнительную информацию по управлению моделью; в данном случае он позволяет задать специальный атрибут, который приказывает Django использовать форму мно- жественного числа Entries при обращении более чем к одной записи.
        verbose_name_plural='entries'
        
    def __str__(self): #Метод __str__() сообщает Django, какая информация должна отображаться при обращении к отдельным записям. Так как запись может быть достаточно длинным блоком текста, мы приказываем Django выводить только первые 50 символов
        """Возвращает строковое представление модели."""
        return f"{self.text[:50]}..."