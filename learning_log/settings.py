"""
Django settings for learning_log project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ir2s)-yc37^8+y$*p^(gt1+sirc11$b-v#h6^vexq3x-klul3t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#В текущем варианте развертывания проекта существует одна очевидная проблема: настройка DEBUG=True в файле settings .py, включающая вывод отладочных сообщений при возникновении ошибок. Страницы ошибок Django предоставляют критическую отладочную информацию при разработке проекта, но они также дают слишком много информации хакерам, если оставить их включенными на рабочем сервере.
#Для управления выводом отладочной информации на работающем сайте исполь- зуется переменная среды, то есть значение, связанное с конкретной рабочей средой.
#Это один из способов хранения конфиденциальной информации на сервере, прикотором она отделяется от остального кода проекта.
#Изменим файл settings.py, чтобы он проверял переменную среды при запуске проекта на Heroku

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Мои приложения
    'learning_logs',
    'users',
    # Сторонние приложения
    'bootstrap4', #код для включения django-bootstrap4
    # Приложения django по умолчанию.
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'learning_log.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'learning_log.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}
#HEROKU не підтримує sqlite3, тому treba postgresql

DATABASES = {
    'default': {
        'ENGINE':'django.db.backends.postgresql_psycopg2',
        'NAME':'learning_log',
        'USER':'postgres',
        'PASSWORD':'123456789',
        'PORT':'5432',
        'HOST':'localhost',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#Когда пользователь, не прошедший проверку, запрашивает страницу, защищенную декоратором @login_required, 
# Django отправляет пользователя на URL-адрес, определяемый LOGIN_URL в settings .py.

# Мои настройки
LOGIN_URL = '/users/login/'

# Настройки Heroku
# Здесь импортируется модуль django_heroku и вызывается функция settings(). Эта функция изменяет некоторые настройки, 
# которые должны иметь определенные значения для среды Heroku.
import django_heroku
django_heroku.settings(locals())

if os.environ.get('DEBUG') == 'TRUE':
    DEBUG = True
elif os.environ.get('DEBUG') == 'FALSE':
    DEBUG = False

# Метод os.environ.get() читает значение, связанное с заданной переменной среды в любом окружении, в котором 
# выполняется проект. Если запрашиваемая переменная задана, метод возвращает ее значение; если она не задана, 
# метод возвращает None

#В логическом контексте строка 'False' интерпретируется как True, потому что любая непустая строка интерпретируется
# как True. По этой причине мы использовали строки 'TRUE' и 'FALSE', записанные в верхнем регистре, чтобы четко 
# показать, что мы не сохраняем логические значения True и False языка Python. Когда Django читает переменную 
# среды с ключом 'DEBUG' в Heroku, мы присваиваем DEBUG зна- чение True, если переменная содержит 'TRUE', 
# или значение False, если переменная содержит 'FALSE'.
